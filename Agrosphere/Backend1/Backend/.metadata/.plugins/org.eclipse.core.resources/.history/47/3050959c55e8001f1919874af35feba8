package com.app.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Jwts;

@Component // spring bean : can be injected in other spring beans
public class JwtAuthenticationFilter extends OncePerRequestFilter {
	// token verification
	// dep : JWT utils
	@Autowired
	private JwtUtils utils;

//	@Override
//	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//			throws ServletException, IOException {
//		// check auth header from incoming request
//		String authHeader = request.getHeader("Authorization");
//		if (authHeader != null && authHeader.startsWith("Bearer ")) {
//			// => req header contains JWT
//			String jwt = authHeader.substring(7);
//			// validate JWT
//			Claims payloadClaims = utils.validateJwtToken(jwt);
//			// get user name from the claims
//			String email = utils.getUserNameFromJwtToken(payloadClaims);
//			// get granted authorities as a custom claim
//			List<GrantedAuthority> authorities = utils.getAuthoritiesFromClaims(payloadClaims);
//			// add username/email n granted authorities in Authentication object
//			UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(email, null,
//					authorities);
//			// save this auth token under spring sec so that subsequent filters will NOT
//			// retry the auth again
//			SecurityContextHolder.getContext().setAuthentication(token);
//			System.out.println("saved auth token in sec ctx");
//		}
//		filterChain.doFilter(request, response);// to continue with remaining chain of spring sec filters
//
//	}

	  private final String SECRET_KEY = "your-secret-key";  // Use your secret key here

	    @SuppressWarnings("deprecation")
		@Override
	    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	            throws ServletException, IOException {

	        String token = request.getHeader("Authorization");

	        if (token != null && token.startsWith("Bearer ")) {
	            token = token.substring(7);  // Remove "Bearer " prefix

	            try {
	                // Validate the token
	                Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);  // Validate token with the secret key
	            } catch (Exception e) {
	                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);  // Token is invalid or expired
	                response.getWriter().write("Invalid or expired token.");
	                return;
	            }
	        } else {
	            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
	            response.getWriter().write("Authorization token is missing.");
	            return;
	        }

	        filterChain.doFilter(request, response);  // Proceed to the next filter
	    }
	
}
