package com.app.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.dto.FarmerListDto;
import com.app.entities.UserEntity;
import com.app.service.UserService;


@RestController
@RequestMapping("/users")
@CrossOrigin(origins = "http://localhost:3000")

public class UserController 
{

		@Autowired
		UserService userService;
		
		
		@GetMapping("/list")
		
		public ResponseEntity<?> getAllFarmers()
		{
			List<FarmerListDto> users = userService.getUsers();
			
			if(users.isEmpty())
				return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
			
			return ResponseEntity.ok(users);
			
		}
		
		
//		@PutMapping("/edit/{id}")
//		public ResponseEntity<?> updateUsers(@RequestBody @Valid Signup dto, @PathVariable Long id)	
//		{
//			//return ResponseEntity.status(HttpStatus.CREATED).body(userService.userRegistration(dto));
//
//			return ResponseEntity.status(HttpStatus.ACCEPTED).body(userService.updateUser(dto, id));
//			
//		}
		
		
		
		@PutMapping("/edit/{id}")
		public ResponseEntity<?> updateUsers(@PathVariable Long id, @RequestBody UserEntity obj) {
		    try {
		        return ResponseEntity.status(HttpStatus.ACCEPTED).body(userService.updateUser(id, obj));
		    } catch (Exception e) {
		        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found with id: " + id);
		    }
		}

		
		
		@DeleteMapping("/delete/{id}")
		public ResponseEntity<?> deleteUser(@PathVariable Long id)
		{
			try {
				return ResponseEntity.ok(userService.deleteUser(id));
			}catch (Exception e) {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
			}
		}
		
		 @GetMapping("/{id}")
		    public ResponseEntity<?> getUsers(@PathVariable Long id, HttpServletRequest request) {
		        String username = getUsernameFromJwt(request); // Extract username from token
		        if (username == null) {
		            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized: Token is missing or invalid.");
		        }

		        try {
		            UserEntity user = userService.getUsers(id);
		            if (user == null) {
		                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found with id: " + id);
		            }
		            return ResponseEntity.ok(user);
		        } catch (Exception e) {
		            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred while fetching user.");
		        }
		    }

}
