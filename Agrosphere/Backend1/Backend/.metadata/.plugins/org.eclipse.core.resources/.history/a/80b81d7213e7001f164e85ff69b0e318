package com.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.dto.FarmerListDto;
import com.app.entities.UserEntity;
import com.app.service.UserService;


@RestController
@RequestMapping("/users")
@CrossOrigin(origins = "http://localhost:3000")

public class UserController 
{

		@Autowired
		UserService userService;
		
		
		@GetMapping("/list")
		
		public ResponseEntity<?> getAllFarmers()
		{
			List<FarmerListDto> users = userService.getUsers();
			
			if(users.isEmpty())
				return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
			
			return ResponseEntity.ok(users);
			
		}
		
		
//		@PutMapping("/edit/{id}")
//		public ResponseEntity<?> updateUsers(@RequestBody @Valid Signup dto, @PathVariable Long id)	
//		{
//			//return ResponseEntity.status(HttpStatus.CREATED).body(userService.userRegistration(dto));
//
//			return ResponseEntity.status(HttpStatus.ACCEPTED).body(userService.updateUser(dto, id));
//			
//		}
		
		
		
		@PutMapping("/edit/{id}")
		public ResponseEntity<?> updateUsers(@PathVariable Long id, @RequestBody UserEntity updatedUser) {
		    try {
		        // Fetch the existing user from the database
		        UserEntity existingUser = userService.getUsers(id);

		        if (existingUser == null) {
		            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
		        }

		        // Check if password is provided in the request; if not, retain the existing password
		        if (updatedUser.getPassword() == null || updatedUser.getPassword().isEmpty()) {
		            updatedUser.setPassword(existingUser.getPassword()); // Preserve existing password
		        }
		        
		        // Update the other fields
		        existingUser.setEmail(updatedUser.getEmail());
		        existingUser.setRole(updatedUser.getRole());
		        existingUser.setAddress(updatedUser.getAddress());
		        existingUser.setFirstName(updatedUser.getFirstName());
		        existingUser.setLastName(updatedUser.getLastName());

		        // Save the updated user entity
		        userService.save(existingUser);

		        return ResponseEntity.ok("User updated successfully");
		    } catch (Exception e) {
		        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error updating user: " + e.getMessage());
		    }
		}


		
		
		@DeleteMapping("/delete/{id}")
		public ResponseEntity<?> deleteUser(@PathVariable Long id)
		{
			try {
				return ResponseEntity.ok(userService.deleteUser(id));
			}catch (Exception e) {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
			}
		}
		
		@GetMapping("{id}")
		public ResponseEntity<?> getUsers(@PathVariable Long id) {
		    UserEntity user = userService.getUsers(id);  // Assuming userService returns a user object
		    if (user == null) {
		        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
		    }
		    return ResponseEntity.ok(user);
		}

}
