package com.app.controller;
//
//import java.util.Map;
//
//import javax.validation.Valid;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.security.authentication.AuthenticationManager;
//import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
//import org.springframework.security.core.Authentication;
//import org.springframework.web.bind.annotation.CrossOrigin;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.RestController;
//
//import com.app.dto.SigninRequest;
//import com.app.dto.SigninResponse;
//import com.app.dto.Signup;
//import com.app.security.CustomUserDetails;
//import com.app.security.JwtUtils;
//import com.app.service.EmailService;
//import com.app.service.UserService;
//
//@RestController
//@RequestMapping("/users")
//@CrossOrigin(origins = "http://localhost:3000") // Allow requests from React frontend
//
//
//public class UserSignInSignUpController {
//	@Autowired
//	private UserService userService;
//	@Autowired
//	private JwtUtils utils;
//
//	@Autowired
//	private AuthenticationManager mgr;
//
//	 @Autowired
//     private EmailService emailService;
//	// sign up
//	@PostMapping("/signup")
//	public ResponseEntity<?> userSignup(@RequestBody @Valid Signup dto) {
//		System.out.println("in sign up " + dto);
//		return ResponseEntity.status(HttpStatus.CREATED).body(userService.userRegistration(dto));
//	}
//
//	/*
//	 * request payload : Auth req DTO : email n password resp payload : In case of
//	 * success : Auth Resp DTO : mesg + JWT token + SC 200 IN case of failure : SC
//	 * 401
//	 */
////	@PostMapping("/signin")
////	public ResponseEntity<?> signinUser(@RequestBody @Valid SigninRequest reqDTO) {
////		System.out.println("in signin " + reqDTO);
////		// simply invoke authentucate(...) on AuthMgr
////		// i/p : Authentication => un verifed credentials
////		// i/f --> Authentication --> imple by UsernamePasswordAuthToken
////		// throws exc OR rets : verified credentials (UserDetails i.pl class: custom
////		// user details)
////
////		Authentication verifiedAuth = mgr
////				.authenticate(new UsernamePasswordAuthenticationToken
////						(reqDTO.getEmail(), reqDTO.getPassword()));
////		System.out.println(verifiedAuth.getClass());// Custom user details
////		// => auth success
////		
////	   return ResponseEntity
////				.ok(new SigninResponse(utils.generateJwtToken(verifiedAuth), "Successful Authentication!!!"));
////
////	}
//	
//	@PostMapping("/signin")
//	public ResponseEntity<?> signinUser(@RequestBody @Valid SigninRequest reqDTO) {
//		System.out.println("in signin " + reqDTO);
//
//		Authentication verifiedAuth = mgr
//				.authenticate(new UsernamePasswordAuthenticationToken
//						(reqDTO.getEmail(), reqDTO.getPassword()));
//		System.out.println(verifiedAuth.getClass());// Custom user details
//		
//		
//		CustomUserDetails userDetails = (CustomUserDetails) verifiedAuth.getPrincipal();
//		
//		
//		SigninResponse response = new SigninResponse(
//				utils.generateJwtToken(verifiedAuth),
//				"Successful Authenticaton !!",
//				userDetails.getUser().getRole().name(),
//				userDetails.getUser().getFirstName(),
//				userDetails.getUser().getId()
//				);
//		
//	   return ResponseEntity.ok(response);
//
//	}
//	
//	 // Forgot password request
//	@PostMapping("/forgot-password")
//	public ResponseEntity<String> forgotPassword(@RequestBody Map<String, String> requestBody) {
//	    String email = requestBody.get("email");
//	    boolean success = userService.requestPasswordReset(email);
//	    if (success) {
//	        return ResponseEntity.ok("Password reset link sent to your email.");
//	    } else {
//	        return ResponseEntity.status(HttpStatus.NOT_FOUND)
//	                             .body("User not found with email: " + email);
//	    }
//	}
//
//
//    // Reset password (by token and new password)
//    @PostMapping("/reset-password")
//    public ResponseEntity<String> resetPassword(@RequestParam String token, @RequestParam String newPassword) {
//        boolean success = userService.resetPassword(token, newPassword);
//        if (success) {
//            return ResponseEntity.ok("Password has been reset successfully.");
//        } else {
//            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
//                                 .body("Invalid or expired token.");
//        }
//        
//    }
//    }
//
//       
//
//

import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.app.dto.SigninRequest;
import com.app.dto.SigninResponse;
import com.app.dto.Signup;
import com.app.security.CustomUserDetails;
import com.app.security.JwtUtils;
import com.app.service.EmailService;
import com.app.service.UserService;

@RestController
@RequestMapping("/users")
@CrossOrigin(origins = "http://localhost:3000") // Allow requests from React frontend
public class UserSignInSignUpController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private JwtUtils utils;

    @Autowired
    private AuthenticationManager mgr;

    @Autowired
    private EmailService emailService;

    // Sign-up
    @PostMapping("/signup")
    public ResponseEntity<?> userSignup(@RequestBody @Valid Signup dto) {
        System.out.println("In sign-up: " + dto);

        // Register the user
        var registeredUser = userService.userRegistration(dto);
        System.out.println(registeredUser.getFirstName());
        // Send registration email after successful registration
        String subject = "Registration Successful!";
        String message = "Dear " + registeredUser.getFirstName() + ",\n\n" +
                         "Thank you for registering with us. Your account has been successfully created.\n\n" +
                         "Best regards,\n AgrosphereTeam" ;
                        

        emailService.sendRegistrationEmail(registeredUser.getEmail(), subject);

        // Return response with a success message
        return ResponseEntity.status(HttpStatus.CREATED).body("Registration successful! A confirmation email has been sent.");
    }

    // Sign-in (authenticate user)
    @PostMapping("/signin")
    public ResponseEntity<?> signinUser(@RequestBody @Valid SigninRequest reqDTO) {
        System.out.println("In sign-in: " + reqDTO);

        // Authenticate the user
        Authentication verifiedAuth = mgr.authenticate(new UsernamePasswordAuthenticationToken(
                reqDTO.getEmail(), reqDTO.getPassword()));
        
        CustomUserDetails userDetails = (CustomUserDetails) verifiedAuth.getPrincipal();
        
        // Generate and return JWT token along with user details
        SigninResponse response = new SigninResponse(
                utils.generateJwtToken(verifiedAuth),
                "Successful Authentication!",
                userDetails.getUser().getRole().name(),
                userDetails.getUser().getFirstName(),
                userDetails.getUser().getId()
        );

        return ResponseEntity.ok(response);
    }

    // Forgot password
    @PostMapping("/forgot-password")
    public ResponseEntity<String> forgotPassword(@RequestBody Map<String, String> requestBody) {
        String email = requestBody.get("email");
        boolean success = userService.requestPasswordReset(email);
        if (success) {
            return ResponseEntity.ok("Password reset link sent to your email.");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                                 .body("User not found with email: " + email);
        }
    }

    // Reset password by token
    @PostMapping("/reset-password")
    public ResponseEntity<String> resetPassword(@RequestParam String token, @RequestParam String newPassword) {
        boolean success = userService.resetPassword(token, newPassword);
        if (success) {
            return ResponseEntity.ok("Password has been reset successfully.");
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                                 .body("Invalid or expired token.");
        }
    }
}
