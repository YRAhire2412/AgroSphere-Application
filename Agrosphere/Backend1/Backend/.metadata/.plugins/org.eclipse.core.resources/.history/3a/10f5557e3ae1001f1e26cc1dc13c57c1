package com.app.service;

import java.util.ArrayList;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.dao.UserEntityDao;
import com.app.dto.FarmerListDto;
import com.app.dto.Signup;
import com.app.entities.UserEntity;


@Service
@Transactional
public class UserServiceImpl implements UserService {
	//dep : dao layer i/f
	@Autowired
	private UserEntityDao userDao;
	
	@Autowired
	private com.app.dto.modelMapper.ModelMapper modelMapper;
	
	//dep
	@Autowired
	private ModelMapper mapper;
	//dep 
	@Autowired
	private PasswordEncoder encoder;

	@Override
	public Signup userRegistration(Signup reqDTO) {
		//dto --> entity
		UserEntity user=mapper.map(reqDTO, UserEntity.class);
		user.setPassword(encoder.encode(user.getPassword()));//pwd : encrypted using SHA
		return mapper.map(userDao.save(user), Signup.class);
	}
	
	
	@Override
	public List<FarmerListDto> getUsers() {
		
		List<UserEntity> list=userDao.findAll();
		List<FarmerListDto> list2 = new ArrayList<>();
		for(UserEntity i:list) {
			list2.add((modelMapper.UserEntityToFarmerDto(i)));
		}
		
		return list2;
	}

	@Override
	public String updateUser(UserEntity obj, Long id) {
		
		if(userDao.existsById(id))
		{
		 
			UserEntity user=mapper.map(obj, UserEntity.class);
			user.setPassword(encoder.encode(user.getPassword()));//pwd : encrypted using SHA
			 mapper.map(userDao.save(user), UserEntity.class);
			 return "Updated Sccessfully...";
			
		}
		
		return "Id NOT FOUND" ;
	}

	
	@Override
	public String deleteUser(Long id) {

			if(userDao.existsById(id))
			{
				userDao.deleteById(id);
			   return "Deleted Succesfully...";
			}
		return "User Not Found";
	}

}
